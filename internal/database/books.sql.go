// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: books.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, title, author, description, pages, user_id, created_at, updated_at)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, author, description, pages, created_at, updated_at, user_id
`

type CreateBookParams struct {
	ID          uuid.UUID
	Title       string
	Author      string
	Description string
	Pages       int32
	UserID      uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.Pages,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Pages,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, description, pages, created_at, updated_at, user_id FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Pages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
SELECT id, title, author, description, pages, created_at, updated_at, user_id FROM books WHERE author = $1
`

func (q *Queries) GetBooksByAuthor(ctx context.Context, author string) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Pages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByUser = `-- name: GetBooksByUser :many
SELECT id, title, author, description, pages, created_at, updated_at, user_id FROM books WHERE user_id = $1
`

func (q *Queries) GetBooksByUser(ctx context.Context, userID uuid.UUID) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Pages,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getById = `-- name: GetById :one
SELECT id, title, author, description, pages, created_at, updated_at, user_id FROM books WHERE id = $1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, getById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Pages,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getByTitle = `-- name: GetByTitle :one
SELECT id, title, author, description, pages, created_at, updated_at, user_id FROM books WHERE title = $1
`

func (q *Queries) GetByTitle(ctx context.Context, title string) (Book, error) {
	row := q.db.QueryRowContext(ctx, getByTitle, title)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Pages,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
